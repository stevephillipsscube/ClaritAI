import argparse, re, html, shutil, subprocess
from pathlib import Path
import xml.etree.ElementTree as ET
from xml.dom.minidom import parseString
import sys  # <-- add this at the top with the other imports
import io

# --- ensure UTF-8-safe printing (avoid UnicodeEncodeError on Windows consoles) ---
try:
    sys.stdout.reconfigure(encoding="utf-8", errors="replace")
    sys.stderr.reconfigure(encoding="utf-8", errors="replace")
except AttributeError:
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8", errors="replace")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8", errors="replace")


NS = "http://soap.sforce.com/2006/04/metadata"

def delete_folder_tree(path: Path):
    if path.exists():
        shutil.rmtree(path, ignore_errors=True)
        print(f"[CLEAN] Deleted folder tree: {path}")

def purge_eml(path: Path):
    # Delete any accidental/outside-generated *.eml files
    for p in path.rglob("*.eml"):
        try:
            p.unlink()
            print(f"[CLEAN] Removed stray .eml: {p}")
        except Exception as e:
            print(f"[WARN] Could not remove {p}: {e}")


def to_safe_devname(name: str) -> str:
    s = re.sub(r"[^A-Za-z0-9]", "_", name)
    s = re.sub(r"_+", "_", s).strip("_")
    if not s or not s[0].isalpha():
        s = "T_" + s if s else "T_Template"
    return s

def stage_templates(src_dir: Path, email_root: Path, folder: str, clean: bool) -> Path:
    out_dir = email_root / folder
    out_dir.mkdir(parents=True, exist_ok=True)
    if clean:
        for p in out_dir.glob("*"):
            if p.is_file():
                p.unlink()

    # make sure no stray .eml files linger
    purge_eml(out_dir)
    purge_eml(email_root)
    purge_eml(src_dir)  # ‚Üê also purge .eml in the input directory

    files = sorted(src_dir.glob("*.emailTemplate-meta.xml"))
    SRC_SUFFIX = ".emailTemplate-meta.xml"

    processed: list[Path] = []  # ‚Üê track successfully staged input files

    for src in files:
        tree = ET.parse(src)
        root = tree.getroot()

        def g(tag: str):
            el = root.find(f"{{{NS}}}{tag}")
            return el.text if el is not None else None

        display_name   = g("name") or src.stem
        subject        = g("subject") or ""
        related_entity = g("relatedEntityType") or ""
        api_version    = g("apiVersion") or "59.0"
        html_value     = g("htmlValue") or ""
        html_body      = html.unescape(html_value)

        # Keep the filename/order exactly as generated by your formatter
        if not src.name.endswith(SRC_SUFFIX):
            print(f"[WARN] Skipping unexpected file: {src.name}")
            continue
        dev = src.name[:-len(SRC_SUFFIX)]  # e.g. Tent_Permit_1_Project_Submitted

        # 1) Body (*.email)
        (out_dir / f"{dev}.email").write_text(html_body, encoding="utf-8")

        # 2) Metadata (*.email-meta.xml) ‚Äì Lightning (SFX) required fields
        meta = ET.Element("EmailTemplate", xmlns=NS)
        ET.SubElement(meta, "apiVersion").text = api_version
        ET.SubElement(meta, "description").text = g("description") or ""
        ET.SubElement(meta, "encodingKey").text = "UTF-8"
        ET.SubElement(meta, "style").text = "none"
        ET.SubElement(meta, "type").text = "custom"
        ET.SubElement(meta, "uiType").text = "SFX"
        ET.SubElement(meta, "name").text = display_name
        if related_entity:
            ET.SubElement(meta, "relatedEntityType").text = related_entity
        ET.SubElement(meta, "subject").text = subject or "change me"

        pretty = parseString(ET.tostring(meta, encoding="utf-8")).toprettyxml(indent="  ")
        (out_dir / f"{dev}.email-meta.xml").write_text(pretty, encoding="utf-8")

        print(f"[STAGED] {src.name} -> {dev}.email(+meta) in {folder}/")
        processed.append(src)  # ‚Üê mark this input file for deletion

    # üî• After staging, clean the input directory of processed files
    for p in processed:
        try:
            p.unlink()
            print(f"[CLEAN] Removed from input: {p.name}")
        except Exception as e:
            print(f"[WARN] Could not remove {p}: {e}")

    # Optionally remove the input folder if now empty
    try:
        next(src_dir.iterdir())
    except StopIteration:
        try:
            src_dir.rmdir()
            print(f"[CLEAN] Removed empty input folder: {src_dir}")
        except OSError:
            pass

    return out_dir



def find_sf_cli() -> str:
    return shutil.which("sf") or r"C:\Program Files\sf\bin\sf.cmd"

def deploy(email_dir: Path, org_alias: str, dry_run: bool):
    cli = find_sf_cli()
    if not Path(cli).exists() and shutil.which("sf") is None:
        raise RuntimeError("sf CLI not found. Install Salesforce CLI and auth with an alias.")

    # Deploy the whole email directory so it picks up all folders/files
    src_dir = email_dir.parent  # force-app/main/default/email
    cmd = [cli, "project", "deploy", "start",
           "--source-dir", str(src_dir),
           "--target-org", org_alias]
    if dry_run:
        cmd.append("--dry-run")

    print("[INFO] Running:", " ".join(cmd))
    return subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8")

def main():
    ap = argparse.ArgumentParser(description="Stage and deploy Salesforce Email Templates (Lightning) only.")
    ap.add_argument("--src", default="generated_code_replaced",
                    help="Folder with *.emailTemplate-meta.xml (from your generator/replacer).")
    ap.add_argument("--email-root", default="force-app/main/default/email",
                    help="SFDX email root in your project.")
    ap.add_argument("--folder", default="unfiled$public",
                    help="Target Email Folder name (must exist in org).")
    ap.add_argument("--org", default="clarit-org",
                    help="sf CLI alias for the target org.")
    ap.add_argument("--clean", action="store_true",
                    help="Clean the target email folder before staging.")
    ap.add_argument("--dry-run", action="store_true",
                    help="Dry run deploy (no changes in org).")
    args = ap.parse_args()

    src_dir = Path(args.src)
    email_root = Path(args.email_root)

    # üî• Delete the local target folder (e.g., email/unfiled$public) before staging
    delete_folder_tree(email_root / args.folder)

    out_dir = stage_templates(src_dir, email_root, args.folder, args.clean)

    print("[INFO] Deploying email templates‚Ä¶")
    res = deploy(out_dir, args.org, args.dry_run)
    print(res.stdout)
    if res.returncode == 0:
        print("[‚úÖ] Email templates deployment successful.")
    else:
        print("[‚ùå] Deployment failed:")
        print(res.stderr)
        sys.exit(res.returncode)

if __name__ == "__main__":
    main()
